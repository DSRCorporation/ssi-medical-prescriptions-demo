// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreatePresentationRequestResponse defines model for createPresentationRequestResponse.
type CreatePresentationRequestResponse struct {
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// Credential defines model for credential.
type Credential struct {
	Context           *[]string `json:"@context,omitempty"`
	CredentialSubject *struct {
		Id           *string       `json:"id,omitempty"`
		Name         *string       `json:"name,omitempty"`
		Prescription *Prescription `json:"prescription,omitempty"`
	} `json:"credentialSubject,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	IssuanceDate   *string `json:"issuanceDate,omitempty"`
	Issuer         *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issuer,omitempty"`
	Proof *CredentialProof `json:"proof,omitempty"`
	Type  *[]string        `json:"type,omitempty"`
}

// CredentialOfferResponse defines model for credentialOfferResponse.
type CredentialOfferResponse struct {
	CredentialOfferId *string `json:"credentialOfferId,omitempty"`
}

// CredentialProof defines model for credentialProof.
type CredentialProof struct {
	Created            *string `json:"created,omitempty"`
	Jws                *string `json:"jws,omitempty"`
	ProofPurpose       *string `json:"proofPurpose,omitempty"`
	Type               *string `json:"type,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// CredentialResponse defines model for credentialResponse.
type CredentialResponse struct {
	Credential *Credential `json:"credential,omitempty"`
}

// Drug defines model for drug.
type Drug struct {
	DrugName           *string      `json:"drugName,omitempty"`
	DrugNumber         *float32     `json:"drugNumber,omitempty"`
	DrugType           *string      `json:"drugType,omitempty"`
	Info               *interface{} `json:"info,omitempty"`
	RefillAvailability *bool        `json:"refillAvailability,omitempty"`
}

// Error defines model for error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetAllDidsResponse defines model for getAllDidsResponse.
type GetAllDidsResponse struct {
	Dids *[]string `json:"dids,omitempty"`
}

// GetAllPrescriptionCredentialResponse defines model for getAllPrescriptionCredentialResponse.
type GetAllPrescriptionCredentialResponse struct {
	Credentials *[]Credential `json:"credentials,omitempty"`
}

// GetCredentialOfferResponse defines model for getCredentialOfferResponse.
type GetCredentialOfferResponse struct {
	Prescription *Prescription `json:"prescription,omitempty"`
}

// GetPresentationRequestResponse defines model for getPresentationRequestResponse.
type GetPresentationRequestResponse struct {
	Challenge             *string `json:"challenge,omitempty"`
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// GetVerifiablePresentationResponse defines model for getVerifiablePresentationResponse.
type GetVerifiablePresentationResponse struct {
	Presentation        *Presentation `json:"presentation,omitempty"`
	VerificationComment *string       `json:"verificationComment,omitempty"`
	VerificationStatus  *bool         `json:"verificationStatus,omitempty"`
}

// OintmentDrugInfo defines model for ointmentDrugInfo.
type OintmentDrugInfo struct {
	AmountOfMedicine     *float32 `json:"amountOfMedicine,omitempty"`
	ApplicationFrequency *string  `json:"applicationFrequency,omitempty"`
	Usage                *string  `json:"usage,omitempty"`
	UseArea              *string  `json:"useArea,omitempty"`
}

// Prescription defines model for prescription.
type Prescription struct {
	Drugs        *[]Drug `json:"drugs,omitempty"`
	HospitalInfo *struct {
		DoctorName               *string  `json:"doctorName,omitempty"`
		DoctorSignatureStamp     *string  `json:"doctorSignatureStamp,omitempty"`
		HospitalName             *string  `json:"hospitalName,omitempty"`
		Location                 *string  `json:"location,omitempty"`
		MedicalInstitutionNumber *float32 `json:"medicalInstitutionNumber,omitempty"`
		Phone                    *string  `json:"phone,omitempty"`
		PrefectureNumber         *float32 `json:"prefectureNumber,omitempty"`
		ScoreVoteNumber          *float32 `json:"scoreVoteNumber,omitempty"`
	} `json:"hospitalInfo,omitempty"`
	IssuanceInfo *struct {
		ExpirationDate *string `json:"expirationDate,omitempty"`
		IssuanceDate   *string `json:"issuanceDate,omitempty"`
	} `json:"issuanceInfo,omitempty"`
	PatientInfo *struct {
		Birthday *string `json:"birthday,omitempty"`
		Name     *string `json:"name,omitempty"`
		Sex      *string `json:"sex,omitempty"`
	} `json:"patientInfo,omitempty"`
}

// Presentation defines model for presentation.
type Presentation struct {
	Context              *[]string            `json:"@context,omitempty"`
	Proof                *[]PresentationProof `json:"proof,omitempty"`
	Type                 *string              `json:"type,omitempty"`
	VerifiableCredential *[]Credential        `json:"verifiableCredential,omitempty"`
}

// PresentationProof defines model for presentationProof.
type PresentationProof struct {
	Created            *string `json:"created,omitempty"`
	Jws                *string `json:"jws,omitempty"`
	ProofPurpose       *string `json:"proofPurpose,omitempty"`
	Type               *string `json:"type,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// PresentationResponse defines model for presentationResponse.
type PresentationResponse struct {
	Presentation *Presentation `json:"presentation,omitempty"`
}

// TabletDrugInfo defines model for tabletDrugInfo.
type TabletDrugInfo struct {
	DaysOfMedication     *float32 `json:"daysOfMedication,omitempty"`
	NumberOfDoses        *string  `json:"numberOfDoses,omitempty"`
	NumberOfDrug         *float32 `json:"numberOfDrug,omitempty"`
	TimingToTakeMedicine *string  `json:"timingToTakeMedicine,omitempty"`
}

// VerificationResponse defines model for verificationResponse.
type VerificationResponse struct {
	Verified *bool `json:"verified,omitempty"`
}

// PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONBody defines parameters for PostV1DoctorsDoctorIdPrescriptionsCredentialOffers.
type PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONBody = Prescription

// PostV1PatientsPatientIdPrescriptionsCredentialsJSONBody defines parameters for PostV1PatientsPatientIdPrescriptionsCredentials.
type PostV1PatientsPatientIdPrescriptionsCredentialsJSONBody struct {
	CredentialOfferId *string `json:"credentialOfferId,omitempty"`
	Did               *string `json:"did,omitempty"`
	KmsPassphrase     *string `json:"kmsPassphrase,omitempty"`
}

// PostV1PatientsPatientIdPrescriptionsPresentationsJSONBody defines parameters for PostV1PatientsPatientIdPrescriptionsPresentations.
type PostV1PatientsPatientIdPrescriptionsPresentationsJSONBody struct {
	CredentialId          *string `json:"credentialId,omitempty"`
	KmsPassphrase         *string `json:"kmsPassphrase,omitempty"`
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// PostV1VcVerifyCredentialJSONBody defines parameters for PostV1VcVerifyCredential.
type PostV1VcVerifyCredentialJSONBody = Credential

// PostV1VcVerifyPresentationJSONBody defines parameters for PostV1VcVerifyPresentation.
type PostV1VcVerifyPresentationJSONBody = Presentation

// PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONRequestBody defines body for PostV1DoctorsDoctorIdPrescriptionsCredentialOffers for application/json ContentType.
type PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONRequestBody = PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONBody

// PostV1PatientsPatientIdPrescriptionsCredentialsJSONRequestBody defines body for PostV1PatientsPatientIdPrescriptionsCredentials for application/json ContentType.
type PostV1PatientsPatientIdPrescriptionsCredentialsJSONRequestBody PostV1PatientsPatientIdPrescriptionsCredentialsJSONBody

// PostV1PatientsPatientIdPrescriptionsPresentationsJSONRequestBody defines body for PostV1PatientsPatientIdPrescriptionsPresentations for application/json ContentType.
type PostV1PatientsPatientIdPrescriptionsPresentationsJSONRequestBody PostV1PatientsPatientIdPrescriptionsPresentationsJSONBody

// PostV1VcVerifyCredentialJSONRequestBody defines body for PostV1VcVerifyCredential for application/json ContentType.
type PostV1VcVerifyCredentialJSONRequestBody = PostV1VcVerifyCredentialJSONBody

// PostV1VcVerifyPresentationJSONRequestBody defines body for PostV1VcVerifyPresentation for application/json ContentType.
type PostV1VcVerifyPresentationJSONRequestBody = PostV1VcVerifyPresentationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates credential offer for prescription (generates a link for QR code)
	// (POST /v1/doctors/{doctorId}/prescriptions/credential-offers/)
	PostV1DoctorsDoctorIdPrescriptionsCredentialOffers(ctx echo.Context, doctorId string) error
	// Gets credential offer by id
	// (GET /v1/doctors/{doctorId}/prescriptions/credential-offers/{credentialOfferId})
	GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx echo.Context, doctorId string, credentialOfferId string) error
	// Gets credential issued for given credential offer
	// (GET /v1/doctors/{doctorId}/prescriptions/credential-offers/{credentialOfferId}/credential)
	GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx echo.Context, doctorId string, credentialOfferId string) error
	// Gets all dids belonging to given patient
	// (GET /v1/patients/{patientId}/dids)
	GetV1PatientsPatientIdDids(ctx echo.Context, patientId string) error
	// Gets all prescription credentials issued for given patient
	// (GET /v1/patients/{patientId}/prescriptions/credentials)
	GetV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context, patientId string) error
	// Creates credential in response to credential offer from doctor
	// (POST /v1/patients/{patientId}/prescriptions/credentials/)
	PostV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context, patientId string) error
	// Gets prescription credential by id issued for given patient
	// (GET /v1/patients/{patientId}/prescriptions/credentials/{credentialId})
	GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId(ctx echo.Context, patientId string, credentialId string) error
	// Creates verifiable presentation in response to prescription presentation request from pharmacy
	// (POST /v1/patients/{patientId}/prescriptions/presentations)
	PostV1PatientsPatientIdPrescriptionsPresentations(ctx echo.Context, patientId string) error
	// Creates presentation request for prescription (generates link for a QR code)
	// (POST /v1/pharmacies/{pharmacyId}/prescriptions/presentation-requests)
	PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx echo.Context, pharmacyId string) error
	// Gets presentation request for prescription by request id
	// (GET /v1/pharmacies/{pharmacyId}/prescriptions/presentation-requests/{presentationRequestId})
	GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx echo.Context, pharmacyId string, presentationRequestId string) error
	// Gets verifiable presentation for given presentation request
	// (GET /v1/pharmacies/{pharmacyId}/prescriptions/presentation-requests/{presentationRequestId}/presentation)
	GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx echo.Context, pharmacyId string, presentationRequestId string) error
	// Verify Credential
	// (POST /v1/vc/verify-credential)
	PostV1VcVerifyCredential(ctx echo.Context) error
	// Verify Credential
	// (POST /v1/vc/verify-presentation)
	PostV1VcVerifyPresentation(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV1DoctorsDoctorIdPrescriptionsCredentialOffers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1DoctorsDoctorIdPrescriptionsCredentialOffers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1DoctorsDoctorIdPrescriptionsCredentialOffers(ctx, doctorId)
	return err
}

// GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	// ------------- Path parameter "credentialOfferId" -------------
	var credentialOfferId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialOfferId", runtime.ParamLocationPath, ctx.Param("credentialOfferId"), &credentialOfferId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialOfferId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx, doctorId, credentialOfferId)
	return err
}

// GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	// ------------- Path parameter "credentialOfferId" -------------
	var credentialOfferId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialOfferId", runtime.ParamLocationPath, ctx.Param("credentialOfferId"), &credentialOfferId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialOfferId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx, doctorId, credentialOfferId)
	return err
}

// GetV1PatientsPatientIdDids converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PatientsPatientIdDids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PatientsPatientIdDids(ctx, patientId)
	return err
}

// GetV1PatientsPatientIdPrescriptionsCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PatientsPatientIdPrescriptionsCredentials(ctx, patientId)
	return err
}

// PostV1PatientsPatientIdPrescriptionsCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PatientsPatientIdPrescriptionsCredentials(ctx, patientId)
	return err
}

// GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, ctx.Param("credentialId"), &credentialId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId(ctx, patientId, credentialId)
	return err
}

// PostV1PatientsPatientIdPrescriptionsPresentations converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PatientsPatientIdPrescriptionsPresentations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PatientsPatientIdPrescriptionsPresentations(ctx, patientId)
	return err
}

// PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx, pharmacyId)
	return err
}

// GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	// ------------- Path parameter "presentationRequestId" -------------
	var presentationRequestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "presentationRequestId", runtime.ParamLocationPath, ctx.Param("presentationRequestId"), &presentationRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentationRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx, pharmacyId, presentationRequestId)
	return err
}

// GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	// ------------- Path parameter "presentationRequestId" -------------
	var presentationRequestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "presentationRequestId", runtime.ParamLocationPath, ctx.Param("presentationRequestId"), &presentationRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentationRequestId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx, pharmacyId, presentationRequestId)
	return err
}

// PostV1VcVerifyCredential converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1VcVerifyCredential(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1VcVerifyCredential(ctx)
	return err
}

// PostV1VcVerifyPresentation converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1VcVerifyPresentation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1VcVerifyPresentation(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/doctors/:doctorId/prescriptions/credential-offers/", wrapper.PostV1DoctorsDoctorIdPrescriptionsCredentialOffers)
	router.GET(baseURL+"/v1/doctors/:doctorId/prescriptions/credential-offers/:credentialOfferId", wrapper.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId)
	router.GET(baseURL+"/v1/doctors/:doctorId/prescriptions/credential-offers/:credentialOfferId/credential", wrapper.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential)
	router.GET(baseURL+"/v1/patients/:patientId/dids", wrapper.GetV1PatientsPatientIdDids)
	router.GET(baseURL+"/v1/patients/:patientId/prescriptions/credentials", wrapper.GetV1PatientsPatientIdPrescriptionsCredentials)
	router.POST(baseURL+"/v1/patients/:patientId/prescriptions/credentials/", wrapper.PostV1PatientsPatientIdPrescriptionsCredentials)
	router.GET(baseURL+"/v1/patients/:patientId/prescriptions/credentials/:credentialId", wrapper.GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId)
	router.POST(baseURL+"/v1/patients/:patientId/prescriptions/presentations", wrapper.PostV1PatientsPatientIdPrescriptionsPresentations)
	router.POST(baseURL+"/v1/pharmacies/:pharmacyId/prescriptions/presentation-requests", wrapper.PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests)
	router.GET(baseURL+"/v1/pharmacies/:pharmacyId/prescriptions/presentation-requests/:presentationRequestId", wrapper.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId)
	router.GET(baseURL+"/v1/pharmacies/:pharmacyId/prescriptions/presentation-requests/:presentationRequestId/presentation", wrapper.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation)
	router.POST(baseURL+"/v1/vc/verify-credential", wrapper.PostV1VcVerifyCredential)
	router.POST(baseURL+"/v1/vc/verify-presentation", wrapper.PostV1VcVerifyPresentation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
