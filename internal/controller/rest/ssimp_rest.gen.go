// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreatePresentationRequestResponse defines model for createPresentationRequestResponse.
type CreatePresentationRequestResponse struct {
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// Credential defines model for credential.
type Credential struct {
	Context           *[]string `json:"@context,omitempty"`
	CredentialSubject *struct {
		Id           *string       `json:"id,omitempty"`
		Name         *string       `json:"name,omitempty"`
		Prescription *Prescription `json:"prescription,omitempty"`
	} `json:"credentialSubject,omitempty"`
	ExpirationDate *string          `json:"expirationDate,omitempty"`
	Id             *string          `json:"id,omitempty"`
	IssuanceDate   *string          `json:"issuanceDate,omitempty"`
	Issuer         *string          `json:"issuer,omitempty"`
	Proof          *CredentialProof `json:"proof,omitempty"`
	Type           *string          `json:"type,omitempty"`
}

// CredentialOfferResponse defines model for credentialOfferResponse.
type CredentialOfferResponse struct {
	CredentialOfferId *string `json:"credentialOfferId,omitempty"`
}

// CredentialProof defines model for credentialProof.
type CredentialProof struct {
	Created            *string `json:"created,omitempty"`
	Jws                *string `json:"jws,omitempty"`
	ProofPurpose       *string `json:"proofPurpose,omitempty"`
	Type               *string `json:"type,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// CredentialResponse defines model for credentialResponse.
type CredentialResponse struct {
	Credential *Credential `json:"credential,omitempty"`
}

// Drug defines model for drug.
type Drug struct {
	DrugName           *string      `json:"drugName,omitempty"`
	DrugNumber         *float32     `json:"drugNumber,omitempty"`
	DrugType           *string      `json:"drugType,omitempty"`
	Info               *interface{} `json:"info,omitempty"`
	RefillAvailability *bool        `json:"refillAvailability,omitempty"`
}

// Error defines model for error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetAllDidsResponse defines model for getAllDidsResponse.
type GetAllDidsResponse struct {
	Dids *[]string `json:"dids,omitempty"`
}

// GetAllPrescriptionCredentialResponse defines model for getAllPrescriptionCredentialResponse.
type GetAllPrescriptionCredentialResponse struct {
	Credentials *[]Credential `json:"credentials,omitempty"`
}

// GetCredentialOfferResponse defines model for getCredentialOfferResponse.
type GetCredentialOfferResponse struct {
	Prescription *Prescription `json:"prescription,omitempty"`
}

// GetPresentationRequestResponse defines model for getPresentationRequestResponse.
type GetPresentationRequestResponse struct {
	Challenge             *string `json:"challenge,omitempty"`
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// GetVerifiablePresentationResponse defines model for getVerifiablePresentationResponse.
type GetVerifiablePresentationResponse struct {
	Presentation        *Presentation `json:"presentation,omitempty"`
	VerificationComment *string       `json:"verificationComment,omitempty"`
	VerificationStatus  *bool         `json:"verificationStatus,omitempty"`
}

// OintmentDrugInfo defines model for ointmentDrugInfo.
type OintmentDrugInfo struct {
	AmountOfMedicine     *float32 `json:"amountOfMedicine,omitempty"`
	ApplicationFrequency *string  `json:"applicationFrequency,omitempty"`
	Usage                *string  `json:"usage,omitempty"`
	UseArea              *string  `json:"useArea,omitempty"`
}

// PatientAuthCredential defines model for patientAuthCredential.
type PatientAuthCredential struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Prescription defines model for prescription.
type Prescription struct {
	Drugs        *[]Drug `json:"drugs,omitempty"`
	HospitalInfo *struct {
		DoctorName               *string  `json:"doctorName,omitempty"`
		DoctorSignatureStamp     *string  `json:"doctorSignatureStamp,omitempty"`
		HospitalName             *string  `json:"hospitalName,omitempty"`
		Location                 *string  `json:"location,omitempty"`
		MedicalInstitutionNumber *float32 `json:"medicalInstitutionNumber,omitempty"`
		Phone                    *string  `json:"phone,omitempty"`
		PrefectureNumber         *float32 `json:"prefectureNumber,omitempty"`
		ScoreVoteNumber          *float32 `json:"scoreVoteNumber,omitempty"`
	} `json:"hospitalInfo,omitempty"`
	IssuanceInfo *struct {
		ExpirationDate *string `json:"expirationDate,omitempty"`
		IssuanceDate   *string `json:"issuanceDate,omitempty"`
	} `json:"issuanceInfo,omitempty"`
	PatientInfo *struct {
		Birthday *string `json:"birthday,omitempty"`
		Name     *string `json:"name,omitempty"`
		Sex      *string `json:"sex,omitempty"`
	} `json:"patientInfo,omitempty"`
}

// Presentation defines model for presentation.
type Presentation struct {
	Context              *[]string            `json:"@context,omitempty"`
	Proof                *[]PresentationProof `json:"proof,omitempty"`
	Type                 *string              `json:"type,omitempty"`
	VerifiableCredential *[]Credential        `json:"verifiableCredential,omitempty"`
}

// PresentationProof defines model for presentationProof.
type PresentationProof struct {
	Created            *string `json:"created,omitempty"`
	Jws                *string `json:"jws,omitempty"`
	ProofPurpose       *string `json:"proofPurpose,omitempty"`
	Type               *string `json:"type,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// PresentationResponse defines model for presentationResponse.
type PresentationResponse struct {
	Presentation *Presentation `json:"presentation,omitempty"`
}

// TabletDrugInfo defines model for tabletDrugInfo.
type TabletDrugInfo struct {
	DaysOfMedication     *float32 `json:"daysOfMedication,omitempty"`
	NumberOfDoses        *string  `json:"numberOfDoses,omitempty"`
	NumberOfDrug         *float32 `json:"numberOfDrug,omitempty"`
	TimingToTakeMedicine *string  `json:"timingToTakeMedicine,omitempty"`
}

// VerificationResponse defines model for verificationResponse.
type VerificationResponse struct {
	Verified *bool `json:"verified,omitempty"`
}

// PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONBody defines parameters for PostV1DoctorsDoctorIdPrescriptionsCredentialOffers.
type PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONBody = Prescription

// PostV1PatientsLoginJSONBody defines parameters for PostV1PatientsLogin.
type PostV1PatientsLoginJSONBody = PatientAuthCredential

// PostV1PatientsRegisterJSONBody defines parameters for PostV1PatientsRegister.
type PostV1PatientsRegisterJSONBody = PatientAuthCredential

// PostV1PatientsPatientIdPrescriptionsCredentialsJSONBody defines parameters for PostV1PatientsPatientIdPrescriptionsCredentials.
type PostV1PatientsPatientIdPrescriptionsCredentialsJSONBody struct {
	CredentialOfferId *string `json:"credentialOfferId,omitempty"`
	Did               *string `json:"did,omitempty"`
	KmsPassphrase     *string `json:"kmsPassphrase,omitempty"`
}

// PostV1PatientsPatientIdPrescriptionsPresentationsJSONBody defines parameters for PostV1PatientsPatientIdPrescriptionsPresentations.
type PostV1PatientsPatientIdPrescriptionsPresentationsJSONBody struct {
	CredentialId          *string `json:"credentialId,omitempty"`
	KmsPassphrase         *string `json:"kmsPassphrase,omitempty"`
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// PostV1VcVerifyCredentialJSONBody defines parameters for PostV1VcVerifyCredential.
type PostV1VcVerifyCredentialJSONBody = Credential

// PostV1VcVerifyPresentationJSONBody defines parameters for PostV1VcVerifyPresentation.
type PostV1VcVerifyPresentationJSONBody = Presentation

// PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONRequestBody defines body for PostV1DoctorsDoctorIdPrescriptionsCredentialOffers for application/json ContentType.
type PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONRequestBody = PostV1DoctorsDoctorIdPrescriptionsCredentialOffersJSONBody

// PostV1PatientsLoginJSONRequestBody defines body for PostV1PatientsLogin for application/json ContentType.
type PostV1PatientsLoginJSONRequestBody = PostV1PatientsLoginJSONBody

// PostV1PatientsRegisterJSONRequestBody defines body for PostV1PatientsRegister for application/json ContentType.
type PostV1PatientsRegisterJSONRequestBody = PostV1PatientsRegisterJSONBody

// PostV1PatientsPatientIdPrescriptionsCredentialsJSONRequestBody defines body for PostV1PatientsPatientIdPrescriptionsCredentials for application/json ContentType.
type PostV1PatientsPatientIdPrescriptionsCredentialsJSONRequestBody PostV1PatientsPatientIdPrescriptionsCredentialsJSONBody

// PostV1PatientsPatientIdPrescriptionsPresentationsJSONRequestBody defines body for PostV1PatientsPatientIdPrescriptionsPresentations for application/json ContentType.
type PostV1PatientsPatientIdPrescriptionsPresentationsJSONRequestBody PostV1PatientsPatientIdPrescriptionsPresentationsJSONBody

// PostV1VcVerifyCredentialJSONRequestBody defines body for PostV1VcVerifyCredential for application/json ContentType.
type PostV1VcVerifyCredentialJSONRequestBody = PostV1VcVerifyCredentialJSONBody

// PostV1VcVerifyPresentationJSONRequestBody defines body for PostV1VcVerifyPresentation for application/json ContentType.
type PostV1VcVerifyPresentationJSONRequestBody = PostV1VcVerifyPresentationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates credential offer for prescription (generates a link for QR code)
	// (POST /v1/doctors/{doctorId}/prescriptions/credential-offers/)
	PostV1DoctorsDoctorIdPrescriptionsCredentialOffers(ctx echo.Context, doctorId string) error
	// Gets credential offer by id
	// (GET /v1/doctors/{doctorId}/prescriptions/credential-offers/{credentialOfferId})
	GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx echo.Context, doctorId string, credentialOfferId string) error
	// Gets credential issued for given credential offer
	// (GET /v1/doctors/{doctorId}/prescriptions/credential-offers/{credentialOfferId}/credential)
	GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx echo.Context, doctorId string, credentialOfferId string) error
	// Login patient
	// (POST /v1/patients/login)
	PostV1PatientsLogin(ctx echo.Context) error
	// Register new patient
	// (POST /v1/patients/register)
	PostV1PatientsRegister(ctx echo.Context) error
	// Gets all dids belonging to given patient
	// (GET /v1/patients/{patientId}/dids)
	GetV1PatientsPatientIdDids(ctx echo.Context, patientId string) error
	// Gets all prescription credentials issued for given patient
	// (GET /v1/patients/{patientId}/prescriptions/credentials)
	GetV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context, patientId string) error
	// Creates credential in response to credential offer from doctor
	// (POST /v1/patients/{patientId}/prescriptions/credentials/)
	PostV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context, patientId string) error
	// Gets prescription credential by id issued for given patient
	// (GET /v1/patients/{patientId}/prescriptions/credentials/{credentialId})
	GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId(ctx echo.Context, patientId string, credentialId string) error
	// Creates verifiable presentation in response to prescription presentation request from pharmacy
	// (POST /v1/patients/{patientId}/prescriptions/presentations)
	PostV1PatientsPatientIdPrescriptionsPresentations(ctx echo.Context, patientId string) error
	// Creates presentation request for prescription (generates link for a QR code)
	// (POST /v1/pharmacies/{pharmacyId}/prescriptions/presentation-requests)
	PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx echo.Context, pharmacyId string) error
	// Gets presentation request for prescription by request id
	// (GET /v1/pharmacies/{pharmacyId}/prescriptions/presentation-requests/{presentationRequestId})
	GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx echo.Context, pharmacyId string, presentationRequestId string) error
	// Gets verifiable presentation for given presentation request
	// (GET /v1/pharmacies/{pharmacyId}/prescriptions/presentation-requests/{presentationRequestId}/presentation)
	GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx echo.Context, pharmacyId string, presentationRequestId string) error
	// Verify Credential
	// (POST /v1/vc/verify-credential)
	PostV1VcVerifyCredential(ctx echo.Context) error
	// Verify Credential
	// (POST /v1/vc/verify-presentation)
	PostV1VcVerifyPresentation(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV1DoctorsDoctorIdPrescriptionsCredentialOffers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1DoctorsDoctorIdPrescriptionsCredentialOffers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1DoctorsDoctorIdPrescriptionsCredentialOffers(ctx, doctorId)
	return err
}

// GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	// ------------- Path parameter "credentialOfferId" -------------
	var credentialOfferId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialOfferId", runtime.ParamLocationPath, ctx.Param("credentialOfferId"), &credentialOfferId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialOfferId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx, doctorId, credentialOfferId)
	return err
}

// GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	// ------------- Path parameter "credentialOfferId" -------------
	var credentialOfferId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialOfferId", runtime.ParamLocationPath, ctx.Param("credentialOfferId"), &credentialOfferId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialOfferId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx, doctorId, credentialOfferId)
	return err
}

// PostV1PatientsLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PatientsLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PatientsLogin(ctx)
	return err
}

// PostV1PatientsRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PatientsRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PatientsRegister(ctx)
	return err
}

// GetV1PatientsPatientIdDids converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PatientsPatientIdDids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PatientsPatientIdDids(ctx, patientId)
	return err
}

// GetV1PatientsPatientIdPrescriptionsCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PatientsPatientIdPrescriptionsCredentials(ctx, patientId)
	return err
}

// PostV1PatientsPatientIdPrescriptionsCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PatientsPatientIdPrescriptionsCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PatientsPatientIdPrescriptionsCredentials(ctx, patientId)
	return err
}

// GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, ctx.Param("credentialId"), &credentialId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId(ctx, patientId, credentialId)
	return err
}

// PostV1PatientsPatientIdPrescriptionsPresentations converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PatientsPatientIdPrescriptionsPresentations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PatientsPatientIdPrescriptionsPresentations(ctx, patientId)
	return err
}

// PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx, pharmacyId)
	return err
}

// GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	// ------------- Path parameter "presentationRequestId" -------------
	var presentationRequestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "presentationRequestId", runtime.ParamLocationPath, ctx.Param("presentationRequestId"), &presentationRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentationRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx, pharmacyId, presentationRequestId)
	return err
}

// GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	// ------------- Path parameter "presentationRequestId" -------------
	var presentationRequestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "presentationRequestId", runtime.ParamLocationPath, ctx.Param("presentationRequestId"), &presentationRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentationRequestId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx, pharmacyId, presentationRequestId)
	return err
}

// PostV1VcVerifyCredential converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1VcVerifyCredential(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1VcVerifyCredential(ctx)
	return err
}

// PostV1VcVerifyPresentation converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1VcVerifyPresentation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1VcVerifyPresentation(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/doctors/:doctorId/prescriptions/credential-offers/", wrapper.PostV1DoctorsDoctorIdPrescriptionsCredentialOffers)
	router.GET(baseURL+"/v1/doctors/:doctorId/prescriptions/credential-offers/:credentialOfferId", wrapper.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId)
	router.GET(baseURL+"/v1/doctors/:doctorId/prescriptions/credential-offers/:credentialOfferId/credential", wrapper.GetV1DoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential)
	router.POST(baseURL+"/v1/patients/login", wrapper.PostV1PatientsLogin)
	router.POST(baseURL+"/v1/patients/register", wrapper.PostV1PatientsRegister)
	router.GET(baseURL+"/v1/patients/:patientId/dids", wrapper.GetV1PatientsPatientIdDids)
	router.GET(baseURL+"/v1/patients/:patientId/prescriptions/credentials", wrapper.GetV1PatientsPatientIdPrescriptionsCredentials)
	router.POST(baseURL+"/v1/patients/:patientId/prescriptions/credentials/", wrapper.PostV1PatientsPatientIdPrescriptionsCredentials)
	router.GET(baseURL+"/v1/patients/:patientId/prescriptions/credentials/:credentialId", wrapper.GetV1PatientsPatientIdPrescriptionsCredentialsCredentialId)
	router.POST(baseURL+"/v1/patients/:patientId/prescriptions/presentations", wrapper.PostV1PatientsPatientIdPrescriptionsPresentations)
	router.POST(baseURL+"/v1/pharmacies/:pharmacyId/prescriptions/presentation-requests", wrapper.PostV1PharmaciesPharmacyIdPrescriptionsPresentationRequests)
	router.GET(baseURL+"/v1/pharmacies/:pharmacyId/prescriptions/presentation-requests/:presentationRequestId", wrapper.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId)
	router.GET(baseURL+"/v1/pharmacies/:pharmacyId/prescriptions/presentation-requests/:presentationRequestId/presentation", wrapper.GetV1PharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation)
	router.POST(baseURL+"/v1/vc/verify-credential", wrapper.PostV1VcVerifyCredential)
	router.POST(baseURL+"/v1/vc/verify-presentation", wrapper.PostV1VcVerifyPresentation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bOG23qs6AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
