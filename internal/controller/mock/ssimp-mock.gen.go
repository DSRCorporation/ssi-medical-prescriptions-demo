// Package mock provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package mock

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Credential defines model for credential.
type Credential struct {
	Context           *[]string `json:"@context,omitempty"`
	CredentialSubject *struct {
		Id           *string       `json:"id,omitempty"`
		Name         *string       `json:"name,omitempty"`
		Prescription *Prescription `json:"prescription,omitempty"`
	} `json:"credentialSubject,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	IssuanceDate   *string `json:"issuanceDate,omitempty"`
	Issuer         *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issuer,omitempty"`
	Proof *CredentialProof `json:"proof,omitempty"`
	Type  *[]string        `json:"type,omitempty"`
}

// CredentialProof defines model for credentialProof.
type CredentialProof struct {
	Created            *string `json:"created,omitempty"`
	Jws                *string `json:"jws,omitempty"`
	ProofPurpose       *string `json:"proofPurpose,omitempty"`
	Type               *string `json:"type,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// Drug defines model for drug.
type Drug struct {
	DrugName           *string      `json:"drugName,omitempty"`
	DrugNumber         *float32     `json:"drugNumber,omitempty"`
	DrugType           *string      `json:"drugType,omitempty"`
	Info               *interface{} `json:"info,omitempty"`
	RefillAvailability *bool        `json:"refillAvailability,omitempty"`
}

// Error defines model for error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// OintmentDrugInfo defines model for ointmentDrugInfo.
type OintmentDrugInfo struct {
	AmountOfMedicine     *float32 `json:"amountOfMedicine,omitempty"`
	ApplicationFrequency *string  `json:"applicationFrequency,omitempty"`
	Usage                *string  `json:"usage,omitempty"`
	UseArea              *string  `json:"useArea,omitempty"`
}

// Prescription defines model for prescription.
type Prescription struct {
	Drugs        *[]Drug `json:"drugs,omitempty"`
	HospitalInfo *struct {
		DoctorName               *string  `json:"doctorName,omitempty"`
		DoctorSignatureStamp     *string  `json:"doctorSignatureStamp,omitempty"`
		HospitalName             *string  `json:"hospitalName,omitempty"`
		Location                 *string  `json:"location,omitempty"`
		MedicalInstitutionNumber *float32 `json:"medicalInstitutionNumber,omitempty"`
		Phone                    *string  `json:"phone,omitempty"`
		PrefectureNumber         *float32 `json:"prefectureNumber,omitempty"`
		ScoreVoteNumber          *float32 `json:"scoreVoteNumber,omitempty"`
	} `json:"hospitalInfo,omitempty"`
	IssuanceInfo *struct {
		ExpirationDate *string `json:"expirationDate,omitempty"`
		IssuanceDate   *string `json:"issuanceDate,omitempty"`
	} `json:"issuanceInfo,omitempty"`
	PatientInfo *struct {
		Birthday *string `json:"birthday,omitempty"`
		Name     *string `json:"name,omitempty"`
		Sex      *string `json:"sex,omitempty"`
	} `json:"patientInfo,omitempty"`
}

// Presentation defines model for presentation.
type Presentation struct {
	Context              *[]string            `json:"@context,omitempty"`
	Proof                *[]PresentationProof `json:"proof,omitempty"`
	Type                 *string              `json:"type,omitempty"`
	VerifiableCredential *[]Credential        `json:"verifiableCredential,omitempty"`
}

// PresentationProof defines model for presentationProof.
type PresentationProof struct {
	Challenge          *string `json:"challenge,omitempty"`
	Created            *string `json:"created,omitempty"`
	Jws                *string `json:"jws,omitempty"`
	ProofPurpose       *string `json:"proofPurpose,omitempty"`
	Type               *string `json:"type,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// TabletDrugInfo defines model for tabletDrugInfo.
type TabletDrugInfo struct {
	DaysOfMedication     *float32 `json:"daysOfMedication,omitempty"`
	NumberOfDoses        *string  `json:"numberOfDoses,omitempty"`
	NumberOfDrug         *float32 `json:"numberOfDrug,omitempty"`
	TimingToTakeMedicine *string  `json:"timingToTakeMedicine,omitempty"`
}

// PostDoctorsDoctorIdPrescriptionsCredentialOffersJSONBody defines parameters for PostDoctorsDoctorIdPrescriptionsCredentialOffers.
type PostDoctorsDoctorIdPrescriptionsCredentialOffersJSONBody = Prescription

// PostPatientsPatientIdPrescriptionsCredentialsJSONBody defines parameters for PostPatientsPatientIdPrescriptionsCredentials.
type PostPatientsPatientIdPrescriptionsCredentialsJSONBody struct {
	CredentialOfferId *string `json:"credentialOfferId,omitempty"`
	Did               *string `json:"did,omitempty"`
	KmsPassphrase     *string `json:"kmsPassphrase,omitempty"`
}

// PostPatientsPatientIdPrescriptionsPresentationsJSONBody defines parameters for PostPatientsPatientIdPrescriptionsPresentations.
type PostPatientsPatientIdPrescriptionsPresentationsJSONBody struct {
	Challenge             *string `json:"challenge,omitempty"`
	CredentialId          *string `json:"credentialId,omitempty"`
	KmsPassphrase         *string `json:"kmsPassphrase,omitempty"`
	PresentationRequestId *string `json:"presentationRequestId,omitempty"`
}

// PostDoctorsDoctorIdPrescriptionsCredentialOffersJSONRequestBody defines body for PostDoctorsDoctorIdPrescriptionsCredentialOffers for application/json ContentType.
type PostDoctorsDoctorIdPrescriptionsCredentialOffersJSONRequestBody = PostDoctorsDoctorIdPrescriptionsCredentialOffersJSONBody

// PostPatientsPatientIdPrescriptionsCredentialsJSONRequestBody defines body for PostPatientsPatientIdPrescriptionsCredentials for application/json ContentType.
type PostPatientsPatientIdPrescriptionsCredentialsJSONRequestBody PostPatientsPatientIdPrescriptionsCredentialsJSONBody

// PostPatientsPatientIdPrescriptionsPresentationsJSONRequestBody defines body for PostPatientsPatientIdPrescriptionsPresentations for application/json ContentType.
type PostPatientsPatientIdPrescriptionsPresentationsJSONRequestBody PostPatientsPatientIdPrescriptionsPresentationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates credential offer for prescription (generates a link for QR code)
	// (POST /doctors/{doctorId}/prescriptions/credential-offers/)
	PostDoctorsDoctorIdPrescriptionsCredentialOffers(ctx echo.Context, doctorId string) error
	// Gets credential offer by id
	// (GET /doctors/{doctorId}/prescriptions/credential-offers/{credentialOfferId})
	GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx echo.Context, doctorId string, credentialOfferId string) error
	// Gets credential issued for given credential offer
	// (GET /doctors/{doctorId}/prescriptions/credential-offers/{credentialOfferId}/credential)
	GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx echo.Context, doctorId string, credentialOfferId string) error
	// Gets all dids belonging to given patient
	// (GET /patients/{patientId}/dids)
	GetPatientsPatientIdDids(ctx echo.Context, patientId string) error
	// Gets all prescription credentials issued for given patient
	// (GET /patients/{patientId}/prescriptions/credentials)
	GetPatientsPatientIdPrescriptionsCredentials(ctx echo.Context, patientId string) error
	// Creates credential in response to credential offer from doctor
	// (POST /patients/{patientId}/prescriptions/credentials/)
	PostPatientsPatientIdPrescriptionsCredentials(ctx echo.Context, patientId string) error
	// Gets prescription credential by id issued for given patient
	// (GET /patients/{patientId}/prescriptions/credentials/{credentialId})
	GetPatientsPatientIdPrescriptionsCredentialsCredentialId(ctx echo.Context, patientId string, credentialId string) error
	// Creates verifiable presentation in response to prescription presentation request from pharmacy
	// (POST /patients/{patientId}/prescriptions/presentations)
	PostPatientsPatientIdPrescriptionsPresentations(ctx echo.Context, patientId string) error
	// Creates presentation request for prescription (generates link for a QR code)
	// (POST /pharmacies/{pharmacyId}/prescriptions/presentation-requests)
	PostPharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx echo.Context, pharmacyId string) error
	// Gets presentation request for prescription by request id
	// (GET /pharmacies/{pharmacyId}/prescriptions/presentation-requests/{presentationRequestId})
	GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx echo.Context, pharmacyId string, presentationRequestId string) error
	// Gets verifiable presentation for given presentation request
	// (GET /pharmacies/{pharmacyId}/prescriptions/presentation-requests/{presentationRequestId}/presentation)
	GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx echo.Context, pharmacyId string, presentationRequestId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostDoctorsDoctorIdPrescriptionsCredentialOffers converts echo context to params.
func (w *ServerInterfaceWrapper) PostDoctorsDoctorIdPrescriptionsCredentialOffers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDoctorsDoctorIdPrescriptionsCredentialOffers(ctx, doctorId)
	return err
}

// GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	// ------------- Path parameter "credentialOfferId" -------------
	var credentialOfferId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialOfferId", runtime.ParamLocationPath, ctx.Param("credentialOfferId"), &credentialOfferId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialOfferId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId(ctx, doctorId, credentialOfferId)
	return err
}

// GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "doctorId" -------------
	var doctorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, ctx.Param("doctorId"), &doctorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter doctorId: %s", err))
	}

	// ------------- Path parameter "credentialOfferId" -------------
	var credentialOfferId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialOfferId", runtime.ParamLocationPath, ctx.Param("credentialOfferId"), &credentialOfferId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialOfferId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential(ctx, doctorId, credentialOfferId)
	return err
}

// GetPatientsPatientIdDids converts echo context to params.
func (w *ServerInterfaceWrapper) GetPatientsPatientIdDids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPatientsPatientIdDids(ctx, patientId)
	return err
}

// GetPatientsPatientIdPrescriptionsCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetPatientsPatientIdPrescriptionsCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPatientsPatientIdPrescriptionsCredentials(ctx, patientId)
	return err
}

// PostPatientsPatientIdPrescriptionsCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) PostPatientsPatientIdPrescriptionsCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPatientsPatientIdPrescriptionsCredentials(ctx, patientId)
	return err
}

// GetPatientsPatientIdPrescriptionsCredentialsCredentialId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPatientsPatientIdPrescriptionsCredentialsCredentialId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, ctx.Param("credentialId"), &credentialId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPatientsPatientIdPrescriptionsCredentialsCredentialId(ctx, patientId, credentialId)
	return err
}

// PostPatientsPatientIdPrescriptionsPresentations converts echo context to params.
func (w *ServerInterfaceWrapper) PostPatientsPatientIdPrescriptionsPresentations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPatientsPatientIdPrescriptionsPresentations(ctx, patientId)
	return err
}

// PostPharmaciesPharmacyIdPrescriptionsPresentationRequests converts echo context to params.
func (w *ServerInterfaceWrapper) PostPharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPharmaciesPharmacyIdPrescriptionsPresentationRequests(ctx, pharmacyId)
	return err
}

// GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	// ------------- Path parameter "presentationRequestId" -------------
	var presentationRequestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "presentationRequestId", runtime.ParamLocationPath, ctx.Param("presentationRequestId"), &presentationRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentationRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId(ctx, pharmacyId, presentationRequestId)
	return err
}

// GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation converts echo context to params.
func (w *ServerInterfaceWrapper) GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pharmacyId" -------------
	var pharmacyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pharmacyId", runtime.ParamLocationPath, ctx.Param("pharmacyId"), &pharmacyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pharmacyId: %s", err))
	}

	// ------------- Path parameter "presentationRequestId" -------------
	var presentationRequestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "presentationRequestId", runtime.ParamLocationPath, ctx.Param("presentationRequestId"), &presentationRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentationRequestId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation(ctx, pharmacyId, presentationRequestId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/doctors/:doctorId/prescriptions/credential-offers/", wrapper.PostDoctorsDoctorIdPrescriptionsCredentialOffers)
	router.GET(baseURL+"/doctors/:doctorId/prescriptions/credential-offers/:credentialOfferId", wrapper.GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferId)
	router.GET(baseURL+"/doctors/:doctorId/prescriptions/credential-offers/:credentialOfferId/credential", wrapper.GetDoctorsDoctorIdPrescriptionsCredentialOffersCredentialOfferIdCredential)
	router.GET(baseURL+"/patients/:patientId/dids", wrapper.GetPatientsPatientIdDids)
	router.GET(baseURL+"/patients/:patientId/prescriptions/credentials", wrapper.GetPatientsPatientIdPrescriptionsCredentials)
	router.POST(baseURL+"/patients/:patientId/prescriptions/credentials/", wrapper.PostPatientsPatientIdPrescriptionsCredentials)
	router.GET(baseURL+"/patients/:patientId/prescriptions/credentials/:credentialId", wrapper.GetPatientsPatientIdPrescriptionsCredentialsCredentialId)
	router.POST(baseURL+"/patients/:patientId/prescriptions/presentations", wrapper.PostPatientsPatientIdPrescriptionsPresentations)
	router.POST(baseURL+"/pharmacies/:pharmacyId/prescriptions/presentation-requests", wrapper.PostPharmaciesPharmacyIdPrescriptionsPresentationRequests)
	router.GET(baseURL+"/pharmacies/:pharmacyId/prescriptions/presentation-requests/:presentationRequestId", wrapper.GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestId)
	router.GET(baseURL+"/pharmacies/:pharmacyId/prescriptions/presentation-requests/:presentationRequestId/presentation", wrapper.GetPharmaciesPharmacyIdPrescriptionsPresentationRequestsPresentationRequestIdPresentation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IfNwGDAhe12nq78/Wl4t/xsAAP//jR64f6YvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
